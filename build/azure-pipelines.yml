trigger:
- master

strategy:
  matrix:
    Windows_win10_x64:
      imageName: 'windows-2019'
      runtime: 'win10-x64'
    Windows_linux_arm:
      imageName: 'windows-2019'
      runtime: 'linux-arm'
    Windows_osx_x64:
      imageName: 'windows-2019'
      runtime: 'osx-x64'
    Linux_win10_x64:
      imageName: 'ubuntu-16.04'
      runtime: 'win10-x64'
    Linux_linux_arm:
      imageName: 'ubuntu-16.04'
      runtime: 'linux-arm'
    Linux_osx_x64:
      imageName: 'ubuntu-16.04'
      runtime: 'osx-x64'
    macOS_win10_x64:
      imageName: 'macos-10.14'
      runtime: 'win10-x64'
    macOS_linux_arm:
      imageName: 'macos-10.14'
      runtime: 'linux-arm'
    macOS_osx_x64:
      imageName: 'macos-10.14'
      runtime: 'osx-x64'

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    includePreviewVersions: true
    version: 3.1.100

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build
    projects: 'ParkingSensor.sln'
    arguments: '--configuration $(buildConfiguration) --runtime $(runtime)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'ParkingSensor.sln'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    nobuild: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop for master'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)'
  condition: and(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(variables['Agent.OS'], 'Windows_NT'))