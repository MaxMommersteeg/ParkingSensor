trigger:
- master

strategy:
  matrix:
    Windows_win10_x64:
      imageName: 'windows-2019'
      runtime: 'win10-x64'
    Windows_linux_arm:
      imageName: 'windows-2019'
      runtime: 'linux-arm'
    Windows_osx_x64:
      imageName: 'windows-2019'
      runtime: 'osx-x64'
    Linux_win10_x64:
      imageName: 'ubuntu-16.04'
      runtime: 'win10-x64'
    Linux_linux_arm:
      imageName: 'ubuntu-16.04'
      runtime: 'linux-arm'
    Linux_osx_x64:
      imageName: 'ubuntu-16.04'
      runtime: 'osx-x64'
    macOS_win10_x64:
      imageName: 'macos-10.14'
      runtime: 'win10-x64'
    macOS_linux_arm:
      imageName: 'macos-10.14'
      runtime: 'linux-arm'
    macOS_osx_x64:
      imageName: 'macos-10.14'
      runtime: 'osx-x64'

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    includePreviewVersions: true
    version: 3.0.100-preview6-012264

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build
    projects: 'ParkingSensor.sln'
    arguments: '--configuration $(buildConfiguration) --runtime $(runtime)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'ParkingSensor.sln'
    arguments: '--configuration $(buildConfiguration)'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    projects: 'ParkingSensor.sln'
    arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --output $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop1